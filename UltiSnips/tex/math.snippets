global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

endglobal

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
	$1
.\] $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet ra "rightarrow" iA
\rightarrow $0
endsnippet

context "math()"
snippet lra "leftrightarrow" iA
\leftrightarrow $0
endsnippet

context "math()"
snippet Lra "Leftrightarrow" iA
\Leftrightarrow $0
endsnippet

context "math()"
snippet exi "Exist" iA
\exists $0
endsnippet

context "math()"
snippet | "tal que" iA
\mid
endsnippet


# Equations
context "math()"
snippet taylor "taylor" wA
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1$0
endsnippet

